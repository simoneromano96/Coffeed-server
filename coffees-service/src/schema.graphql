schema {
  query: Query
  mutation: Mutation
}

scalar DateTimeUtc @juniper(with_time_zone: false)

type Coffee {
  id: ID! @juniper(ownership: "owned")
  name: String!
  price: Float!
  imageUrl: String!
  description: String
}

type Coffees {
  coffees: [Coffee!]!
}

type User {
  id: ID! @juniper(ownership: "owned")
  username: String!
  email: String!
  password: String!
  userType: String! # TODO: Use enum
}

# type Jwt {
#   jwt: String!
# }

# type Claims {
#   iss: String!
#   sub: String!
#   exp: Int!
# }

union BaseResponseData = Coffee | Coffees # | Jwt
type BaseResponse {
  error: Boolean!
  statusCode: Int!
  timestamp: DateTimeUtc!
  message: String!
  data: BaseResponseData
}

input CoffeeInput {
  name: String!
  price: Float!
  imageUrl: String!
  description: String
}

input UpdateCoffeeInput {
  id: ID!
  name: String
  price: Float
  imageUrl: String
  description: String
}

# input UserInput {
#   username: String!
#   email: String!
#   password: String!
# }

type Query {
  coffees: BaseResponse! @juniper(ownership: "owned")
  coffee(id: ID!): BaseResponse! @juniper(ownership: "owned")
  # login(data: UserInput!): BaseResponse! @juniper(ownership: "owned")
}

type Mutation {
  createCoffee(data: CoffeeInput!): BaseResponse! @juniper(ownership: "owned")
  updateCoffee(data: UpdateCoffeeInput!): BaseResponse!
    @juniper(ownership: "owned")
  deleteCoffee(id: ID!): BaseResponse! @juniper(ownership: "owned")
}

# enum UserType {
#   Admin
#   Customer
# }
